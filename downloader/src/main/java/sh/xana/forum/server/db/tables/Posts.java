/*
 * This file is generated by jOOQ.
 */
package sh.xana.forum.server.db.tables;

import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sh.xana.forum.server.db.ForumScrape;
import sh.xana.forum.server.db.Keys;
import sh.xana.forum.server.db.tables.records.PostsRecord;
import sh.xana.forum.server.dbutil.UuidConverter;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Posts extends TableImpl<PostsRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>forum-scrape.Posts</code> */
  public static final Posts POSTS = new Posts();

  /** The class holding records for this type */
  @Override
  public Class<PostsRecord> getRecordType() {
    return PostsRecord.class;
  }

  /** The column <code>forum-scrape.Posts.postId</code>. */
  public final TableField<PostsRecord, UUID> POSTID =
      createField(
          DSL.name("postId"),
          SQLDataType.BINARY(16).nullable(false),
          this,
          "",
          new UuidConverter());

  /** The column <code>forum-scrape.Posts.body</code>. */
  public final TableField<PostsRecord, String> BODY =
      createField(DSL.name("body"), SQLDataType.CLOB.nullable(false), this, "");

  /** The column <code>forum-scrape.Posts.origId</code>. */
  public final TableField<PostsRecord, Integer> ORIGID =
      createField(DSL.name("origId"), SQLDataType.INTEGER.nullable(false), this, "");

  private Posts(Name alias, Table<PostsRecord> aliased) {
    this(alias, aliased, null);
  }

  private Posts(Name alias, Table<PostsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>forum-scrape.Posts</code> table reference */
  public Posts(String alias) {
    this(DSL.name(alias), POSTS);
  }

  /** Create an aliased <code>forum-scrape.Posts</code> table reference */
  public Posts(Name alias) {
    this(alias, POSTS);
  }

  /** Create a <code>forum-scrape.Posts</code> table reference */
  public Posts() {
    this(DSL.name("Posts"), null);
  }

  public <O extends Record> Posts(Table<O> child, ForeignKey<O, PostsRecord> key) {
    super(child, key, POSTS);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : ForumScrape.FORUM_SCRAPE;
  }

  @Override
  public UniqueKey<PostsRecord> getPrimaryKey() {
    return Keys.KEY_POSTS_PRIMARY;
  }

  @Override
  public Posts as(String alias) {
    return new Posts(DSL.name(alias), this);
  }

  @Override
  public Posts as(Name alias) {
    return new Posts(alias, this);
  }

  /** Rename this table */
  @Override
  public Posts rename(String name) {
    return new Posts(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Posts rename(Name name) {
    return new Posts(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<UUID, String, Integer> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
