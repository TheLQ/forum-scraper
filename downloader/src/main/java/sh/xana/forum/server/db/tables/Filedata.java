/*
 * This file is generated by jOOQ.
 */
package sh.xana.forum.server.db.tables;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sh.xana.forum.server.db.ForumScrape;
import sh.xana.forum.server.db.Keys;
import sh.xana.forum.server.db.tables.records.FiledataRecord;
import sh.xana.forum.server.dbutil.UuidConverter;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Filedata extends TableImpl<FiledataRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>forum-scrape.FileData</code> */
  public static final Filedata FILEDATA = new Filedata();

  /** The class holding records for this type */
  @Override
  public Class<FiledataRecord> getRecordType() {
    return FiledataRecord.class;
  }

  /** The column <code>forum-scrape.FileData.pageId</code>. */
  public final TableField<FiledataRecord, UUID> PAGEID =
      createField(
          DSL.name("pageId"),
          SQLDataType.BINARY(16).nullable(false),
          this,
          "",
          new UuidConverter());

  /** The column <code>forum-scrape.FileData.data</code>. */
  public final TableField<FiledataRecord, byte[]> DATA =
      createField(DSL.name("data"), SQLDataType.BLOB.nullable(false), this, "");

  private Filedata(Name alias, Table<FiledataRecord> aliased) {
    this(alias, aliased, null);
  }

  private Filedata(Name alias, Table<FiledataRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>forum-scrape.FileData</code> table reference */
  public Filedata(String alias) {
    this(DSL.name(alias), FILEDATA);
  }

  /** Create an aliased <code>forum-scrape.FileData</code> table reference */
  public Filedata(Name alias) {
    this(alias, FILEDATA);
  }

  /** Create a <code>forum-scrape.FileData</code> table reference */
  public Filedata() {
    this(DSL.name("FileData"), null);
  }

  public <O extends Record> Filedata(Table<O> child, ForeignKey<O, FiledataRecord> key) {
    super(child, key, FILEDATA);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : ForumScrape.FORUM_SCRAPE;
  }

  @Override
  public UniqueKey<FiledataRecord> getPrimaryKey() {
    return Keys.KEY_FILEDATA_PRIMARY;
  }

  @Override
  public List<ForeignKey<FiledataRecord, ?>> getReferences() {
    return Arrays.asList(Keys.FK_FILEDATA_PAGES);
  }

  private transient Pages _pages;

  public Pages pages() {
    if (_pages == null) _pages = new Pages(this, Keys.FK_FILEDATA_PAGES);

    return _pages;
  }

  @Override
  public Filedata as(String alias) {
    return new Filedata(DSL.name(alias), this);
  }

  @Override
  public Filedata as(Name alias) {
    return new Filedata(alias, this);
  }

  /** Rename this table */
  @Override
  public Filedata rename(String name) {
    return new Filedata(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Filedata rename(Name name) {
    return new Filedata(name, null);
  }

  // -------------------------------------------------------------------------
  // Row2 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row2<UUID, byte[]> fieldsRow() {
    return (Row2) super.fieldsRow();
  }
}
