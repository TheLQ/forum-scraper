/*
 * This file is generated by jOOQ.
 */
package sh.xana.forum.server.db.tables.records;

import java.util.UUID;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import sh.xana.forum.server.db.tables.Dataset;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DatasetRecord extends UpdatableRecordImpl<DatasetRecord>
    implements Record3<UUID, Long, Long> {

  private static final long serialVersionUID = 1L;

  /** Setter for <code>forum-scrape.Dataset.pageId</code>. */
  public void setPageid(UUID value) {
    set(0, value);
  }

  /** Getter for <code>forum-scrape.Dataset.pageId</code>. */
  public UUID getPageid() {
    return (UUID) get(0);
  }

  /** Setter for <code>forum-scrape.Dataset.byteStart</code>. */
  public void setBytestart(Long value) {
    set(1, value);
  }

  /** Getter for <code>forum-scrape.Dataset.byteStart</code>. */
  public Long getBytestart() {
    return (Long) get(1);
  }

  /** Setter for <code>forum-scrape.Dataset.byteLength</code>. */
  public void setBytelength(Long value) {
    set(2, value);
  }

  /** Getter for <code>forum-scrape.Dataset.byteLength</code>. */
  public Long getBytelength() {
    return (Long) get(2);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<UUID> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row3<UUID, Long, Long> fieldsRow() {
    return (Row3) super.fieldsRow();
  }

  @Override
  public Row3<UUID, Long, Long> valuesRow() {
    return (Row3) super.valuesRow();
  }

  @Override
  public Field<UUID> field1() {
    return Dataset.DATASET.PAGEID;
  }

  @Override
  public Field<Long> field2() {
    return Dataset.DATASET.BYTESTART;
  }

  @Override
  public Field<Long> field3() {
    return Dataset.DATASET.BYTELENGTH;
  }

  @Override
  public UUID component1() {
    return getPageid();
  }

  @Override
  public Long component2() {
    return getBytestart();
  }

  @Override
  public Long component3() {
    return getBytelength();
  }

  @Override
  public UUID value1() {
    return getPageid();
  }

  @Override
  public Long value2() {
    return getBytestart();
  }

  @Override
  public Long value3() {
    return getBytelength();
  }

  @Override
  public DatasetRecord value1(UUID value) {
    setPageid(value);
    return this;
  }

  @Override
  public DatasetRecord value2(Long value) {
    setBytestart(value);
    return this;
  }

  @Override
  public DatasetRecord value3(Long value) {
    setBytelength(value);
    return this;
  }

  @Override
  public DatasetRecord values(UUID value1, Long value2, Long value3) {
    value1(value1);
    value2(value2);
    value3(value3);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /** Create a detached DatasetRecord */
  public DatasetRecord() {
    super(Dataset.DATASET);
  }

  /** Create a detached, initialised DatasetRecord */
  public DatasetRecord(UUID pageid, Long bytestart, Long bytelength) {
    super(Dataset.DATASET);

    setPageid(pageid);
    setBytestart(bytestart);
    setBytelength(bytelength);
  }
}
