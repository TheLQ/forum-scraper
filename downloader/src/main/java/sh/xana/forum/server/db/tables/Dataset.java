/*
 * This file is generated by jOOQ.
 */
package sh.xana.forum.server.db.tables;

import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sh.xana.forum.server.db.ForumScrape;
import sh.xana.forum.server.db.Keys;
import sh.xana.forum.server.db.tables.records.DatasetRecord;
import sh.xana.forum.server.dbutil.UuidConverter;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Dataset extends TableImpl<DatasetRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>forum-scrape.Dataset</code> */
  public static final Dataset DATASET = new Dataset();

  /** The class holding records for this type */
  @Override
  public Class<DatasetRecord> getRecordType() {
    return DatasetRecord.class;
  }

  /** The column <code>forum-scrape.Dataset.pageId</code>. */
  public final TableField<DatasetRecord, UUID> PAGEID =
      createField(
          DSL.name("pageId"),
          SQLDataType.BINARY(16).nullable(false),
          this,
          "",
          new UuidConverter());

  /** The column <code>forum-scrape.Dataset.byteStart</code>. */
  public final TableField<DatasetRecord, Long> BYTESTART =
      createField(
          DSL.name("byteStart"),
          SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)),
          this,
          "");

  /** The column <code>forum-scrape.Dataset.byteLength</code>. */
  public final TableField<DatasetRecord, Long> BYTELENGTH =
      createField(
          DSL.name("byteLength"),
          SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)),
          this,
          "");

  private Dataset(Name alias, Table<DatasetRecord> aliased) {
    this(alias, aliased, null);
  }

  private Dataset(Name alias, Table<DatasetRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>forum-scrape.Dataset</code> table reference */
  public Dataset(String alias) {
    this(DSL.name(alias), DATASET);
  }

  /** Create an aliased <code>forum-scrape.Dataset</code> table reference */
  public Dataset(Name alias) {
    this(alias, DATASET);
  }

  /** Create a <code>forum-scrape.Dataset</code> table reference */
  public Dataset() {
    this(DSL.name("Dataset"), null);
  }

  public <O extends Record> Dataset(Table<O> child, ForeignKey<O, DatasetRecord> key) {
    super(child, key, DATASET);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : ForumScrape.FORUM_SCRAPE;
  }

  @Override
  public UniqueKey<DatasetRecord> getPrimaryKey() {
    return Keys.KEY_DATASET_PRIMARY;
  }

  @Override
  public Dataset as(String alias) {
    return new Dataset(DSL.name(alias), this);
  }

  @Override
  public Dataset as(Name alias) {
    return new Dataset(alias, this);
  }

  /** Rename this table */
  @Override
  public Dataset rename(String name) {
    return new Dataset(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Dataset rename(Name name) {
    return new Dataset(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<UUID, Long, Long> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
