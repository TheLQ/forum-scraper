/*
 * This file is generated by jOOQ.
 */
package sh.xana.forum.server.db.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sh.xana.forum.server.db.DefaultSchema;
import sh.xana.forum.server.db.Keys;
import sh.xana.forum.server.db.tables.records.SitesRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Sites extends TableImpl<SitesRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>Sites</code> */
  public static final Sites SITES = new Sites();

  /** The class holding records for this type */
  @Override
  public Class<SitesRecord> getRecordType() {
    return SitesRecord.class;
  }

  /** The column <code>Sites.id</code>. */
  public final TableField<SitesRecord, UUID> ID =
      createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

  /** The column <code>Sites.url</code>. */
  public final TableField<SitesRecord, String> URL =
      createField(DSL.name("url"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /** The column <code>Sites.updated</code>. */
  public final TableField<SitesRecord, LocalDateTime> UPDATED =
      createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

  private Sites(Name alias, Table<SitesRecord> aliased) {
    this(alias, aliased, null);
  }

  private Sites(Name alias, Table<SitesRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>Sites</code> table reference */
  public Sites(String alias) {
    this(DSL.name(alias), SITES);
  }

  /** Create an aliased <code>Sites</code> table reference */
  public Sites(Name alias) {
    this(alias, SITES);
  }

  /** Create a <code>Sites</code> table reference */
  public Sites() {
    this(DSL.name("Sites"), null);
  }

  public <O extends Record> Sites(Table<O> child, ForeignKey<O, SitesRecord> key) {
    super(child, key, SITES);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public UniqueKey<SitesRecord> getPrimaryKey() {
    return Keys.PK_SITES;
  }

  @Override
  public List<UniqueKey<SitesRecord>> getKeys() {
    return Arrays.<UniqueKey<SitesRecord>>asList(Keys.PK_SITES);
  }

  @Override
  public Sites as(String alias) {
    return new Sites(DSL.name(alias), this);
  }

  @Override
  public Sites as(Name alias) {
    return new Sites(alias, this);
  }

  /** Rename this table */
  @Override
  public Sites rename(String name) {
    return new Sites(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Sites rename(Name name) {
    return new Sites(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<UUID, String, LocalDateTime> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
